#!/bin/bash

set -o errexit
set -o pipefail

# Squib - A Static Site Generator

readonly squib_version="0.1.0"
readonly squib_configuration_file="squib.ini"
readonly squib_directory_structure=(
    "_layouts"
    "_public"
    "_posts"
    "_includes"
)

# Can be overridden in 'squib.ini'
squib_crunchwrap_command="/usr/local/bin/cw"
squib_markdown_command="/usr/bin/Markdown.pl"
squib_named_pipe="squib.fifo"
squib_build_dir="_site"
squib_watch_interval=5 # Seconds
squib_pagination_url="/blog"

readonly clr_cyan='\033[36m'
readonly clr_yellow="\033[33m"
readonly clr_red="\033[0;31m"
readonly clr_none='\033[0m' # No color

# Defaults
fl_debug=0
fl_watch=0

readonly usage="squib v${squib_version}, a static site generator.
Usage: ${0##*/} [options...] <path/to/variables>
Options:
  -h, --help                                 show this help text
  -v, --verbose                              make the operation more talkative
  -V. --version                              print crunchwrap version
  -w, --watch                                rebuild site on file change
  i, init                                    create project scaffolding
  b, build                                   compile site

Report issues at https://github.com/egladman/squib/issues
"

log::std() {
    # Usage: log::std "string"
    printf '%b\n' "${0##*/}: $*" 1>&2
}

log::warn() {
    # Usage: log::warn "Will Robinson"
    log::std "${clr_yellow}DANGER:${clr_none} $*"
}

log::error() {
    # Usage: log::error "Whoooops something went wrong"
    log::std "${clr_red}ERROR:${clr_none} $*"
}

log::fatal() {
    # Usage: log::fatal "Whoooops something went wrong"
    log::std "${clr_red}FATAL ERROR:${clr_none} $*"

    kill $$ &> /dev/null
}

log::debug() {
    # Usage: log::debug "string"
    if [[ $fl_debug -eq 1 ]]; then
        log::std "${clr_cyan}DEBUG:${clr_none} $*"
    fi
}

string::lstrip() {
    # Usage: string::lstrip "string" "pattern"
    printf '%s\n' "${1##$2}"
}

string::rstrip() {
    # Usage: string::rstrip "string" "pattern"
    printf '%s\n' "${1%%$2}"
}

string::greplace() {
    # Usage: string::greplace "string" "pattern"
    printf '%s\n' "${1//$2/$3}" # global find/replace
}

util::mkpipe() {
    # Usage: util::mkpipe "/path/to/pipe"
    [[ -p "$1" ]] || mkfifo "$1"
}

util::flushpipe() {
    >"$1"
}

util::flushvar() {
    # Usage: util::flush foo bar baz
    # Empty array, string, and set integers to zero

    local variables=("$@")
    for var in "${variables[@]}"; do
        local type="$(_type $var)"
        case "$type" in
            array)
                eval "$var=()"
                ;;
            string)
                eval "$var="
                ;;
            int)
                eval "$var=0"
                ;;
            *)
                _die "Unsupported. Variable: '$var' is type: '$type'"
                ;;
        esac
    done
}

util::basename() {
    # Usage: basename "path" ["suffix"]
    # Taken straight from https://github.com/dylanaraps/pure-bash-bible
    # MIT LICENSE

    local tmp
    tmp=${1%"${1##*[!/]}"}
    tmp=${tmp##*/}
    tmp=${tmp%"${2/"$tmp"}"}

    printf '%s\n' "${tmp:-/}"
}

util::urlencode() {
    # Usage: urlencode "string"
    # Taken straight from https://github.com/dylanaraps/pure-bash-bible
    # MIT LICENSE

    local LC_ALL=C
    for (( i = 0; i < ${#1}; i++ )); do
        : "${1:i:1}"
        case "$_" in
            [a-zA-Z0-9.~_-])
                printf '%s' "$_"
                ;;
            *)
                printf '%%%02X' "'$_"
                ;;
        esac
    done
    printf '\n'
}

util::escape_chars() {
    # Usage: util::escape_chars '<' '>' "<h1>hello world</h1>"

    # Escape specific characters with backslashes.
    if [[ -z "$2" ]]; then
        log::warn "function ${FUNCNAME[0]} expects more than one argument"
        return 1
    fi

    local tmp=("$@")
    local chars=("${tmp[@]::${#tmp[@]}-1}")
    local string="${tmp[-1]}"
    unset tmp

    for char in "${chars[@]}"; do
        string="${string//$char/\\$char}"
    done

    printf '%s\n' "$string"
}

# TODO: remove 'cut' dependency
util::generate_sha1() {
    # Usage: util::generate_sha1 "path/to/file"
    printf '%s\n' "$(sha1sum $1 | cut -d' ' -f1)"
}

squib::create_scaffold() {
    # Usage: squib::create_scaffold "path/to"

    local base_dir="$1"
    [[ -z "$base_dir" ]] && base_dir="."
    # Assumes working directory if path isn't provided

    for d in "${squib_directory_structure[@]}"; do
        mkdir "$base_dir"/"$d"
    done
}

squib::create_ini() {
cat > "$squib_configuration_file" << "EOF"
[squib]
site_url = "example.tld"
base_url = ""
pagination_url = "{{ squib_base_url }}/blog"
pagination_post_html = "<li><span>\"\$post_timestamp_pretty\"</span><a href=\"\$post_relative_url\">\"\$title\"</a></li>"
;crunchwrap_command = "/usr/local/bin/cw"
;markdown_command = "/usr/bin/Markdown.pl"
;build_dir = "_site"
;watch_interval = 5
;named_pipe = "squib.fifo"
EOF
}

squib::parse_ini() {
    # Usage: squib::parse_ini "path/to/file"
    #        squib::parse_ini "path/to/file" false

    # By default variables will be evaluated. Disable this by passing in "false"

    local regex_contains_variable="^([a-zA-Z0-9_]{1,})([[:space:]]\=[[:space:]])(.*)$"
    local regex_contains_wrapped_quotes="^([\"\'])(.*)([\"\'])$"
    local regex_contains_inside_quotes="^([\"])(.*)([\"])(.*)([\"])$"

    local multi_line=""
    while IFS='' read -r line || [[ -n "$line" ]]; do
        # Strip trailing comments from line
        if [[ "$line" == *[[:space:]]\#* ]]; then
            line="${line%%\#*}"
        fi

        case "$line" in
            \#*|\;*)
                # Ignore commented line
                continue
                ;;
            \[*|*\])
                # There is no explicit "end of section" delimiter; sections end at
                # the next section declaration
                section="${line##\[}"     # Strip left bracket
                section="${section%%\]}_" # Strip right bracket
                continue
                ;;
            *\\)
                multi_line+="${line%%\\}\n"
                ;;
            *)
                if [[ -n "$multi_line" ]]; then
                    multi_line+="$line"
                    line="$multi_line"
                    multi_line=""
                fi
                ;;
        esac

        if [[ ! "$line" =~ $regex_contains_variable ]] || [[ -n "$multi_line" ]]; then
            log::debug "${FUNCNAME[0]}:  Skipping '$line'"
            continue
        fi

        local name val
        val="${line/*\= }"            # Everything after the equals sign
        name="${section}${line/$val}" # Invert match. This way we know we've captured everything
        name="${name%% *}"            # Remove trailing whitespace and equals sign

        # Wrap 'val' in quotes if they're missing
        if [[ ! "$val" =~ $regex_contains_wrapped_quotes ]]; then
            val="\"$val\""
        fi

        if [[ "$val" =~ $regex_contains_inside_quotes ]]; then
            local tmp
            tmp="${val##\"}"      # Strip left quote
            tmp="${tmp%%\"}"      # Strip right quote
            tmp="${tmp//\"/\\\"}" # Escape all quotes
            val="\"$tmp\""        # Add back the wrapped quotes
            unset tmp
        fi

        local declaration
        declaration="$(printf '%b\n' "$name=$val")"

        if [[ ! "$2" == "false" ]]; then
            eval "$declaration" || log::fatal "Failed to evaluate '$name'"
        fi

        printf '%s\n' "$declaration"
    done < "$1"

}

squib::parse_args() {
    # Usage: squib::parse_args

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -h|--help)
                printf '%s\n' "$usage"
                exit 0
                ;;
            -v|--verbose)
                fl_debug=1
                ;;
            -V|--version)
                printf '%s\n' "$squib_version"
                exit 0
                ;;
            -w|--watch)
                fl_watch=1
                ;;
            --baseurl)
                # Alright so I know this is stupid. But hear me out.
                # I'm lazy..
                # The reusing the variable name found in 'squib.conf'. Further
                # down we check if 'base_url_override' is set. We don't actually
                # care what it evaluates to
                squib_base_url="$2"
                base_url_override="$squib_base_url"

                log::debug "Overriding 'base_url' with '$2'"
                shift
                ;;
            b|build)
                action+=("build")
                ;;
            i|init)
                squib::create_scaffold "$2"
                squib::create_ini
                exit 0
                ;;
            *)
                if [[ "${#action[@]}" -gt 1 ]]; then
                    printf '%s\n' "$usage"
                    exit 1
                fi
                # Anything that isn't a flag is considered an 'action'
                action+=("$1")
        esac
        shift
    done
}

page::collect_front_matter() {
    # Usage: page::collect_front_matter "/path/to/file"
    # Print a file's front matter

    local variables=()
    local i=0

    while IFS='' read -r line; do
        i=$((i+1))
        if [[ $i -eq 1 ]]; then
            case "$line" in
                "---")
                    continue
                    ;;
                *)
                    log::warn "Skipping '$1'. No front matter found."
                    return 1
                    ;;
            esac
        fi

        # Have we reached the end of the 'front matter'
        [[ "$line" = "---" ]] && break

        variables+=("$line")
    done < "$1"

    printf '%s\n' "${variables[@]}"
}

post::lookup_url() {
    if [[ ! -v post_lookup_table ]]; then
        declare -x -A post_lookup_table # Associative array

        for post in "${squib_posts[@]}"; do
            post_url=$(post::construct_url "$post")

            log::debug "Mapping post '$post' to url '$post_url'"
            post_lookup_table["$post"]="$post_url"
        done

        printf '%s\n' "${post_lookup_table[$post]}"
    fi
}

post::construct_url() {
    local post=$(util::basename "$1")
    local regex_valid_date="^([0-9]{4})\-([0-9]{2})\-([0-9]{2})$"

    # Posts must adhere to either of the two naming conventions:
    # _posts/YYYY-MM-DD-hello-world.md
    # _posts/YYYY-MM-DD-hello-world.html

    # post::construct_url splits a post's filename into two parts:
    # ---------------------------------------------------------------------------
    # 1. The timestamp
    # $pagination_url/YYYY-MM-DD<foobar>.md
    #                 ^^^^^^^^^^

    # 2. The delimiter
    # This is a single character and can equal anything. But to keep thing
    # simple use '-'. This is sits betweeen the date and slug.
    # $pagination_url/YYYY-MM-DD-Hello-World.html
    #                           ^

    # 3. The slug
    # This is everything that precedes 'YYYY-MM-DD-'
    # $pagination_url/YYYY-MM-DD-Hello-World.html
    #                            ^^^^^^^^^^^^^^^^

    # Using substrings is prefered over splitting 'path' into an array delimited
    # by '-', since the slug could contain additional hyphens.

    local post_timestamp="${post:0:10}" # The timestamp length is fixed.
    if [[ ! "$post_timestamp" =~ ^([0-9]{4})\-([0-9]{2})\-([0-9]{2}) ]]; then
        log::warn "post '$post' is not formatted correctly. Filename must be prefixed with: 'YYYY-MM-DD-'"
        return 1
    fi

    local post_slug="${post:11}"
    [[ "$post_slug" == *.md ]] && post_slug=$(string::rstrip "$post_slug" ".md").html # duplicate code
    post_slug="$(util::urlencode ${post_slug,,})" # Downcase, and encode

    # /year/month/day/slug.html
    printf '%s\n' "${squib_base_url}${squib_pagination_url}/${post_timestamp:0:4}/${post_timestamp:5:2}/${post_timestamp:8:2}/$post_slug"
}

post::render_links() {
    declare -a post_html_tags

    local post_relative_url
    for post in "${squib_posts[@]}"; do
        readarray -t front_matter < <(page::collect_front_matter "$post")
        if [[ $? -ne 0 ]]; then
            log::warn "function 'page::collect_front_matter' returned non-zero code."
            return 1
        fi

        # We really only need 'title' and 'draft', but we eval everything just
        # incase we need it in the future
        eval "${front_matter[@]}"

        if [[ "$draft" = "true" ]]; then
            unset layout title tags draft author # Clear front matter variables from previous posts

            log::warn "'draft' set to 'true'. Skipping '$post'"
            continue
        fi

        if [[ -z "$title" ]]; then
            log::warn "'title' is not defined in front matter of post '$post'"
            return 1
        fi

        post_relative_url=$(post::construct_url "$post")
        if [[ $? -ne 0 ]]; then
            log::fatal "function 'post::construct_url' returned non-zero code."
        fi

        local tmp post_timestamp
        tmp=$(util::basename "$post")
        post_timestamp=${tmp:0:10}
        unset tmp

        # TODO: get rid of gnu date dependency
        post_timestamp_pretty=$(date -d "$post_timestamp" "+%B %d, %Y")

        if [[ -n "$squib_pagination_post_html" ]]; then
            local tmp
            tmp="$(util::escape_chars '>' '<' "$squib_pagination_post_html")"
            if [[ $? -ne 0 ]]; then
                log::fatal "function 'util::escape_chars' returned non-zero code."
            fi

            # Using 'eval' in conjunction with printf is an absolute headache.
            # In this scenario I prefer to use 'echo', since I require no
            # special formatting.
            tmp=$(eval echo "$tmp")
            post_html_tags+=("$tmp")
            unset tmp
        else
            post_html_tags+=("<li><span>$post_timestamp_pretty</span><a href=\"$post_relative_url\">$title</a></li>")
        fi

        unset layout title tags draft author # Clear front matter variables from previous posts
    done

    printf '%s\n' "${post_html_tags[@]}"
}

watch::generate_hashes() {
    # Usage: watch::generate_hashes

    if [[ -n "$1" ]]; then
        log::warn "function '${FUNCNAME[0]}' does not support arguments."
        return 1
    fi

    declare -a files
    files=($(find * \( -name _site -o -name .git -o -name README.md \) -prune -o -type f -print))

    for file in "${files[@]}"; do
        watch::generate_hash "$file"
    done
}

watch::generate_hash() {
    # Usage: watch::generate_hash <path/to/file>

    if [[ -n "$2" ]]; then
        log::fatal "function '${FUNCNAME[0]}' called with more than one argument."
    fi

    # Thoughts
    # There's many ways we could go about this. Off the top of my head:
    # 1. Check the inode's mtime using "stat -c '%Y'"
    # 2. Parse the output of "ls -l"
    # 3. Generate a checksum of the file

    # Option 1 isn't cross-platform. 'stat' provided by GNU Coreutils
    # differs from FreeBSD's stat (and I assume other platforms as well)

    # Option 2 is cross-platform. Parsing "ls" is generally frowned upon.
    # Our use case is considered safe since we're parsing the timestamp
    # that preceeds the actual filename, but I still would rather avoid it.

    # Option 3 is cross-platform. coreutils provides 'sha1sum' and 'md5sum'.
    # From my testing 'sha1sum' is the faster choice. I'm not concerned about
    # collisons since we're not using it for cryptographic purposes.

    # Side note: crc32 is a tad faster than sha1, but it's a seperate package and
    # doesn't come bundled with coreutils

    local sha1=$(util::generate_sha1 "$1")
    file_hashes["$1"]="$sha1" # Array is declared in function watch::all
    log::debug "file: '$1', sha1sum: '$sha1'"
}

watch::run() {
    # Usage watch::run "path"
    case "$1" in
        _public/*)
            copy:all
            ;;
        *.html|*.md)
            page::render "$1"
            ;;
        *.conf)
            render::all
            ;;
        *)
            log::warn "Ignoring '$1'"
            return 1
            ;;
    esac
}

watch::all() {
    declare -A file_hashes
    watch::generate_hashes # Seed file_hashes

    log::std "watching..."
    while sleep $squib_watch_interval; do
        for key in ${!file_hashes[@]}; do
            local val="${file_hashes[${key}]}"
            local sha1="$(util::generate_sha1 $key)"

            if [[ "$val" != "$sha1" ]]; then # Update stored sha1 with new value
                file_hashes["$key"]="$sha1"
                log::std "file '$key' modified.\nold: $val\nnew: $sha1"

                local rc
                watch::run "$key" && rc=$?
                [[ $rc -ne 0 ]] && log::warn "'watch::run $key' returned code: $rc"

                continue
            fi
        done
    done
}

page::render() {
    local src="$1" dest="$2"
    declare -a content

    # Infer destination path if one isn't provided
    [[ -z "$dest" ]] && dest="$squib_build_dir"/"$src"

    # We determine the 'dest' from 'src'. So even though the markdown get's
    # compiled to html, we must rename the extension to reflect these changes.
    # Otherwise browsers won't know what to do with a '.md'

    # This is a roundabout way that avoids spawning processes like 'basename'
    [[ "$dest" == *.md ]] && dest=$(string::rstrip "$dest" ".md").html

    # We can to use '\n' as a delimiter otherwise variables that contain spaces
    # would be broken up. There are certainly ways to circumvent this, I just
    # don't care to put in the extra effort. Like who the fuck needs multi-line
    # titles!?
    readarray -t front_matter < <(page::collect_front_matter "$src")
    if [[ $? -ne 0 ]]; then
        log::warn "function 'page::collect_front_matter' returned non-zero code."
        return
    fi

    # layout
    # Variable is sourced from the file's front matter. If 'layout' isn't
    # specified default to '_layouts/default.html'
    [[ -z "$layout" ]] && layout="_layouts/default.html"

    log::debug "file '$src',  front matter: '${front_matter[@]}'"
    unset layout title tags draft author # Clear front matter variables from previous posts
    eval "${front_matter[@]}"

    # Don't render post if it's a draft
    [[ "$draft" = "true" ]] && return

    log::std "Rendering '$src' to '$dest'"

    local front_matter_line_count=$((${#front_matter[@]}+2))
    # We add '2' to account for each triple hyphen ( i.e. --- ) that denotes the
    # front matter's start/end

    # Extract file contents below front matter block
    local i=0
    while IFS='' read -r line; do
        i=$((i+1))
        [[ $i -le $front_matter_line_count ]] && continue

        content+=("$line")
    done < "$src"

    # TODO: remove 'dirname' dependency
    parent_dir=$(dirname "$dest")

    [[ -d "$parent_dir" ]] || mkdir -p "$parent_dir"

    # Compile markdown if eligible
    if [[ "$src" == *.md ]]; then
        content=("$(printf '%s\n' "${content[@]}" | "${squib_markdown_command}")")
    fi
    content_base64="$(printf '%s\n' "${content[@]}" | base64 -w0)"

    declare -a extra_variables
    extra_variables+=("__content__=\"$content_base64\"")
    extra_variables+=("__posts_all__=\"$squib_post_html_tags\"")
    [[ -v metadata_variables ]] && extra_variables+=("${metadata_variables[@]}")
    [[ -v base_url_override ]] && extra_variables+=("base_url=\"$squib_base_url\"")

    printf '%s\n' "${extra_variables[@]}" "$(squib::parse_ini "$squib_configuration_file" false)" > "$squib_named_pipe" &
    #squib::parse_ini "$squib_configuration_file" >> "$squib_named_pipe" &

    # TODO: remmove 'cat' dependency
    if [[ "$fl_debug" -eq 1 ]]; then
        cat "$layout" | "$squib_crunchwrap_command" -i -d "$squib_named_pipe" | tee "$dest"
    else
        cat "$layout" | "$squib_crunchwrap_command" -i -d "$squib_named_pipe" > "$dest"
    fi

    if [[ $? -ne 0 ]]; then
        log::warn "function '$squib_crunchwrap_command' returned non-zero code."
        return 1
    fi
}

post::collect_metadata() {
    # Usage: squib::post_metadata "/path/to/post"
    # Print post meta data in a format that's easily consumable

    local post="$1"

    declare -a meta_post_variables

    # __published_url__
    meta_variables+=("__published_url__=\"$(post::lookup_url)\"")

    # __date__
    local tmp
    tmp=$(util::basename "$file")
    tmp=$(date -d "${tmp:0:10}" "+%B %d, %Y")
    meta_variables+=("__date__=\"$tmp\"")
    unset tmp

    # __title__ AND __author__
    readarray -t front_matter_variables < <(page::collect_front_matter "$post")
    if [[ $? -ne 0 ]]; then
        log::warn "function 'page::collect_front_matter' returned non-zero code."
        return 1
    fi

    meta_variables+=(
        "__title__=\"undefined\""
        "__author__=\"undefined\""
        "__draft__=\"undefined\""
        "__tags__=\"undefined\""
    )

    # Override variables that are defined in the front matter
    for var in "${front_matter_variables[@]}"; do
        case "$var" in
            title\=*)
                local val="${var:6}"
                meta_variables+=("__title__=${val:=undefined}")
                ;;
            author\=*)
                local val="${var:7}"
                meta_variables+=("__author__=${val:=undefined}")
                ;;
            draft\=*)
                local val="${var:6}"
                meta_variables+=("__draft__=${val:=undefined}")
                ;;
            tags\=*)
                local val="${var:5}"
                meta_variables+=("__tags__=${val:=undefined}")
                ;;
        esac
    done

    # The following variables are made available inside posts:
    # __published_url__
    # __date__
    # __title__
    # __author__
    # __tags__

    printf '%s\n' "${meta_variables[@]}"
}

render::all() {
    # Since we have files like 'README.md' and 'LICENSE.md' that aren't consumed
    # by squib, I'm going to flat out ignore all markdown files in the top-level
    # directory. You should instead use '.html'

    blacklist=($(find * -maxdepth 0 -type f -name "*.md" -print))
    # -maxdepth 0
    # Don't traverse into any subdirectories. Only look for files in the
    # current working directory

    # -type f -name "*.md"
    # Only look for files that have extension '.md'

    log::debug "blacklisting: ${blacklist[@]}"

    # Remove blacklisted files found in array: 'blacklist' from array: 'squib_pages'
    declare -a squib_pages_copy
    for file in "${blacklist[@]}"; do
        squib_pages_copy=($(string::greplace "${squib_pages[*]}" "$file" ""))
    done

    # Thoughts
    # I'm sure there's a better way to exclude top-level '.md' files from array
    # 'pages' without running 'find' twice. However the inital 'find' command
    # is already difficult to read, and I wouldn't want to add to it's complexity.

    log::debug "Processing ${#squib_pages_copy[@]} page(s)"
    log::debug "${squib_pages_copy[@]}"

    for file in "${squib_pages_copy[@]}"; do
        local dest=""
        if [[ " ${squib_posts[@]} " =~ " ${file} " ]]; then # it's a post
            readarray -t metadata_variables < <(post::collect_metadata "$file")
            if [[ $? -ne 0 ]]; then
                log::warn "function 'post::collect_metadata' returned non-zero code."
                return 1
            fi

            dest="$squib_build_dir"$(post::construct_url "$file")
            if [[ $? -ne 0 ]]; then
                log::warn "function 'post::construct_url' returned non-zero code."
                return 1
            fi
        fi
        page::render "$file" "$dest"
        unset metadata_variables
    done
}

prep::all() {
    [[ ! -d "$squib_build_dir" ]] && mkdir "$squib_build_dir"
    util::mkpipe "$squib_named_pipe" || util::flushpipe "$squib_named_pipe"
}

copy::all() {
    # Copy all static files in dir '_public'
    cp -r _public/* "$squib_build_dir"/
}

build::all() {
    # Terminology
    # Any '.html' or '.md' file that resides outside of directories: '_layouts', '_includes' is called a 'page'.
    # A 'post' is a 'page', but a 'page' is not a 'post'.

    readonly squib_pages=($(find * \( -name _layouts -o -name _includes -o -name _public -o -name _site -o -name .git \) -prune -o -type f \( -name "*.html" -o -name "*.md" \) -print))
    # ( -name _layouts -o -name _includes -o -name _public -o -name _site -o -name .git ) -prune
    # Don't traverse the following  directories:
    # _layouts, _includes, .git

    # -type f ( -name "*.html" -o -name "*.md" ) -print
    # Only look for files that have extensions '.html' or '.md'

    readonly squib_posts=($(find _posts -type f \( -name "*.html" -o -name "*.md" \) -print | sort -r))

    readonly squib_post_html_tags="<ul>$(post::render_links)</ul>"
    if [[ $? -ne 0 ]]; then
        log::fatal "function 'post::render_links' returned non-zero code."
    fi

    prep::all
    render::all
    copy::all

    [[ $fl_watch -eq 1 ]] && watch::all
}

main() {
    declare -a action

    if [[ -f "$squib_configuration_file" ]]; then
        squib::parse_ini "$squib_configuration_file"
    fi
    squib::parse_args "$@"

    case "$action" in
        "build")
            build::all
            ;;
        *)
            log::fatal "Unsupported action: '$action'"
            ;;
    esac
}
main "$@"
